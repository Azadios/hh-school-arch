Q: Представим, что у нас есть данные, которые мы очень часто читаем по сравнению
с другими (например словарь стран). Как можно это оптимизировать?

A: Проблему можно решить кешированием.

Если это небольшое кол-во read-only данных, тот же словарь стран вряд ли часто
меняется и вряд ли много весит, можно сделать in-code решение, например, создать
spring-bean словарь стран и использовать его. Это решение даст наибольшую скорость.

Если данные всё же достаточно большие и хранение их внутри приложения неразумно,
но и постоянное обращение в бд имеет мало смысла из-за накладных расходов, то можно
создать прокси кеш, который позволит, вероятно, ускорить процесс получения данных.
В случае, если к одной версии записи (т.е. между 2мя последовательными изменениями)
обращение происходит достаточно часто (depends, нужно тестировать и проверять
ускорение для каждого случая), то такое решение даст буст по скорости.

Если же все данные весят много, т.е. требуют хранения в бд, а также, помимо частого
чтения, претерпевают частое изменение, то нужно думать в зависимости от случая.
Вероятно, можно хранить только необходимую часть данных для текущей сессии прямо
в приложении на момент работы, но возникает проблема безопасности, ведь при ошибке
приложения могут быть потеряны данные, полученные более чем за 1 операцию.
Также возникнет проблема параллельного доступа, ведь если работа с данными будет
производиться из 2х мест, то один из читающих может получить устаревшие данные, если
запись в другом месте производилась только в локальную копию. Но, опять же, проблема
сложнее, чем 2 предыдущих случая, нужно думать зная контекст.
